services:
    admin:
      container_name: "admin"
      build: ./services/admin
      env_file:
        - .env
      environment:
        DJANGO_SUPERUSER_PASSWORD: ${ADMIN_DJANGO_SUPERUSER_PASSWORD}
      depends_on:
        admin_db:
          condition: service_healthy
      volumes:
        - ./services/admin/static:/app/static
      healthcheck:
        test: ["CMD-SHELL", "[ -e /app/static ]"]
        interval: 5s
        timeout: 10s
        retries: 15 

    admin_db:
      container_name: "admin_db"
      build: ./services/admin_db
      environment:
          POSTGRES_DB: ${ADMIN_DJANGO_DB_NAME}
          POSTGRES_USER: ${ADMIN_DJANGO_DB_USER}
          POSTGRES_PASSWORD: ${ADMIN_DJANGO_DB_PASSWORD}
          POSTGRES_HOST: ${ADMIN_DJANGO_DB_HOST}
          POSTGRES_PORT: ${ADMIN_DJANGO_DB_PORT}
      env_file:
        - .env
      volumes:
        - ./services/admin_db/data:/var/lib/postgresql/data
      healthcheck:
          test: ["CMD-SHELL", "pg_isready -d admin_database -U postgres"] 
          interval: 2s
          timeout: 10s
          retries: 30

    auth:
      container_name: "auth"
      build: ./services/auth
      volumes:
        - ./services/auth:/app:ro
        - ./services/auth/logs:/app/logs
      env_file:
        - .env
      depends_on:
        auth_db:
          condition: service_healthy
        redis:
          condition: service_healthy
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:8001/health || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 3

    auth_db:
      container_name: "auth_db"
      build: ./services/auth_db
      environment:
          POSTGRES_DB: ${AUTH_POSTGRES_DB_NAME}
          POSTGRES_USER: ${AUTH_POSTGRES_USER}
          POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
          POSTGRES_HOST: ${AUTH_POSTGRES_HOST}
          POSTGRES_PORT: ${AUTH_POSTGRES_PORT}

      volumes:
        - ./services/auth_db/data:/var/lib/postgresql/data
        - ./services/auth_db/docker-entrypoint-initdb:/docker-entrypoint-initdb.d/:ro
      healthcheck:
          test: ["CMD-SHELL", "pg_isready -d auth_db -U admin"] 
          interval: 2s
          retries: 100

    fastapi:
      container_name: "fastapi"
      build: ./services/fastapi
      volumes:
        - ./services/fastapi:/app:ro
        - ./services/fastapi/logs:/app/logs
      env_file:
        - .env
      depends_on:
        - elasticsearch
        - redis
      healthcheck:
        test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
        interval: 10s
        timeout: 5s
        retries: 3

    elasticsearch:
      container_name: "elasticsearch"
      image: elasticsearch:8.12.1
      volumes:
        - ./services/es/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
        - ./services/es/data:/usr/share/elasticsearch/data
      healthcheck:
        test: ["CMD-SHELL", "curl -s http://localhost:9200/_cat/health?h=status | grep -q green"]
        retries: 90
        interval: 3s

    etl_loader:
      container_name: "etl_loader"
      ports: 
        - ${ETL_ELASTIC_PORTS}
      build: ./services/etl_loader
      volumes:
        - ./services/etl_loader:/app:ro
        - ./services/etl_loader/logs:/app/logs
      env_file:
        - .env
      depends_on: 
        elasticsearch:
          condition: service_healthy

    jaeger:
      image: jaegertracing/all-in-one:latest
      container_name: jaeger
      ports:
        - ${JAEGER_PORTS}
      depends_on:
        nginx:
          condition: service_started

    redis:
      build: ./services/redis
      container_name: "redis"
      volumes: 
        - ./services/redis/data:/data
      restart: always
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        timeout: 10s
        retries: 5
        start_period: 10s
      ports:
        - ${REDIS_PORTS}

    nginx:
      container_name: "nginx"
      restart: always
      build: ./services/nginx
      volumes:
        - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        - ./services/nginx/configs:/etc/nginx/conf.d:ro
        - ./services/admin/static:/static/:ro
      ports:
        - ${NGINX_PORTS}
